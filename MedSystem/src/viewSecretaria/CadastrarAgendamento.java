/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewSecretaria;

import DAO.AgendamentoDAO;
import java.util.*;
import DAO.PacienteDAO;
import classes.Agendamento;
import classes.Paciente;
import java.beans.PropertyVetoException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bruno
 */
public class CadastrarAgendamento extends javax.swing.JInternalFrame {

    /**
     * Creates new form CadastrarAgendamento
     */
    //Agendamento auxiliar para Editar
    private Agendamento aux;
    private static boolean agCadFechada = true;

    public CadastrarAgendamento() {
        if (agCadFechada) {
            agCadFechada = false;
            initComponents();
            readJTabela();
            btnEditar.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "ERRO: Janela de agendamento já está aberta!");
        }
    }

    public CadastrarAgendamento(Agendamento a) {
        if (agCadFechada) {
            agCadFechada = false;
            initComponents();
            btnAgendar.setEnabled(false);
            readJTabelaEditar(a.getIdPaciente());

            //Armazendando as informacoes antigas
            aux = a;
            SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
            txtHoraAgendar.setText(a.getHoraAgendamento());
            Date b = null; 
            try {
                b = f.parse(a.getDataAgendamento());
            } catch (ParseException ex) {
                Logger.getLogger(CadastrarAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            }
            txtDataAgendar.setDate(b);
            txtTipoAgendamento.setText(a.getTipoAgendamento());

        } else {
            JOptionPane.showMessageDialog(null, "ERRO: Janela de agendamento já está aberta!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JTextField();
        btnBuscaPaciente = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtHoraAgendar = new javax.swing.JFormattedTextField();
        txtDataAgendar = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTipoAgendamento = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAgPaciente = new javax.swing.JTable();
        btnAgendar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        setClosable(true);
        setResizable(false);
        setTitle("Agendamento");
        setMaximumSize(new java.awt.Dimension(710, 620));
        setMinimumSize(new java.awt.Dimension(710, 620));
        setPreferredSize(new java.awt.Dimension(710, 620));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados"));

        jLabel1.setText("Buscar Paciente:");

        txtNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePacienteActionPerformed(evt);
            }
        });

        btnBuscaPaciente.setText("Buscar");
        btnBuscaPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscaPacienteActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Horário"));

        try {
            txtHoraAgendar.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHoraAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraAgendarActionPerformed(evt);
            }
        });

        jLabel2.setText("Data:");

        jLabel3.setText("Hora:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtHoraAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addComponent(txtDataAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoraAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        txtTipoAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipoAgendamentoActionPerformed(evt);
            }
        });

        jLabel4.setText("Tipo:");

        tabelaAgPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "CPF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAgPaciente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaAgPaciente.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaAgPaciente);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBuscaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(txtTipoAgendamento))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscaPaciente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTipoAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAgendar.setText("Agendar");
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgendar)
                    .addComponent(btnEditar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHoraAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraAgendarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraAgendarActionPerformed

    private void txtNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomePacienteActionPerformed

    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed

        if (txtHoraAgendar.getText().isEmpty() || txtTipoAgendamento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "ERRO: Existem campos vazios!");

        } else {
            if (tabelaAgPaciente.getSelectedRow() != -1) {

                AgendamentoDAO agen = new AgendamentoDAO();
                String cpf = (String) tabelaAgPaciente.getValueAt(tabelaAgPaciente.getSelectedRow(), 1);
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String strData = formato.format(txtDataAgendar.getDate());

                String strHora = txtHoraAgendar.getText();

                Agendamento a = new Agendamento(strHora, strData, txtTipoAgendamento.getText());

                if (agen.create(a, cpf)) {
                    txtHoraAgendar.setText(null);
                    txtDataAgendar.setDate(null);
                    txtTipoAgendamento.setText(null);
                    txtNomePaciente.setText(null);
                    JOptionPane.showMessageDialog(null, "Agendamento marcado para " + strData + " no horário " + strHora + " com sucesso!");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Agendamento sem Paciente!");
            }

        }
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void txtTipoAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipoAgendamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTipoAgendamentoActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        agCadFechada = true;
    }//GEN-LAST:event_formInternalFrameClosed

    private void btnBuscaPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscaPacienteActionPerformed
        readJTabela();
    }//GEN-LAST:event_btnBuscaPacienteActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        if (txtHoraAgendar.getText().isEmpty() || txtTipoAgendamento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "ERRO: Existem campos vazios!");

        } else {
            if (tabelaAgPaciente.getSelectedRow() != -1) {
                AgendamentoDAO agen = new AgendamentoDAO();

                String cpf = (String) tabelaAgPaciente.getValueAt(tabelaAgPaciente.getSelectedRow(), 1);
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String strData = formato.format(txtDataAgendar.getDate());
                String strHora = txtHoraAgendar.getText();

                Agendamento a = new Agendamento(strHora, strData, txtTipoAgendamento.getText());
                PacienteDAO pac = new PacienteDAO();
                

                if (agen.update(a, aux.getDataAgendamento(), aux.getHoraAgendamento(), cpf)) {
                    try {
                        this.setClosed(true);
                        
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(CadastrarAgendamento.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                
            }else{
                JOptionPane.showMessageDialog(null, "Agendamento sem Paciente!");
            }
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    public void readJTabela() {
        DefaultTableModel m = (DefaultTableModel) tabelaAgPaciente.getModel();
        m.setNumRows(0);
        PacienteDAO pac = new PacienteDAO();

        for (Paciente p : pac.read(txtNomePaciente.getText())) {
            m.addRow(new Object[]{
                p.getNomePaciente(),
                p.getCpf()
            });
        }

    }

    public void readJTabelaEditar(int idPaciente) {
        DefaultTableModel m = (DefaultTableModel) tabelaAgPaciente.getModel();
        m.setNumRows(0);
        PacienteDAO pac = new PacienteDAO();
        Paciente p = pac.pesquisaPacienteID(idPaciente);

        m.addRow(new Object[]{
            p.getNomePaciente(),
            p.getCpf()
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnBuscaPaciente;
    private javax.swing.JButton btnEditar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaAgPaciente;
    private com.toedter.calendar.JDateChooser txtDataAgendar;
    private javax.swing.JFormattedTextField txtHoraAgendar;
    private javax.swing.JTextField txtNomePaciente;
    private javax.swing.JTextField txtTipoAgendamento;
    // End of variables declaration//GEN-END:variables
}
